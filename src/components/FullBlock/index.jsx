import React from "react";

import styles from "./FullBlock.module.scss";
import ReactMarkdown from "react-markdown";

function FullBlock() {
  return (
    <main className={styles.fullBlock}>
      <h1 className={styles.fullBlock__title}>
        Как я оптимизировал нынешний проект
      </h1>
      <div>
        <i className={styles.circle}></i> Заметки
        <span>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
          >
            <path d="M15 12c0 1.654-1.346 3-3 3s-3-1.346-3-3 1.346-3 3-3 3 1.346 3 3zm9-.449s-4.252 8.449-11.985 8.449c-7.18 0-12.015-8.449-12.015-8.449s4.446-7.551 12.015-7.551c7.694 0 11.985 7.551 11.985 7.551zm-7 .449c0-2.757-2.243-5-5-5s-5 2.243-5 5 2.243 5 5 5 5-2.243 5-5z" />
          </svg>
          {0}
        </span>
        <span>Дата 05.08.2021 в 23:55:21</span>
      </div>
      <p className={styles.fullBlock__text}>
        Оптимизация сборки проекта ♻️ В последнее время, наш проект в GitLab
        CI/CD начал показывать время сборки и деплоя больше 20 минут! Это очень
        долго и особенно, когда тебя просят сделать срочный фикс. Тогда эти 20
        минут превращаются в вечность. Само приложение собирается 4 минут. В
        проекте более 300 компонентов и 160 страниц в папке /pages Решил
        попробовать сократить время хотя бы до 15 минут и начал с оптимизации
        сборки NextJS. В инете про эту тему инфы не очень много. Всё сводится к
        тому, что ты должен смириться и принять, что твой проект собирается
        медленно или шаманить в Webpack-конфигах, что я в итоге и делал
        Проанализировал проект с помощью @next/bundle-analyzer, заранее нашёл
        несколько библиотек из-за которых сборка весила на +1.4 мб. больше (gzip
        378kb)! Это mapbox-gl и ckeditor. Так как ими практически не будет
        пользоваться покупатель (хоть они и выполняют важную часть сайта), решил
        их выпилить из package.json и написал два компонента, которые будут
        подгружать асинхронно через <script /> эти либы только в тех местах, где
        они реально будут использоваться. Скажу сразу, что сборку это ускорило
        незначительно, только на 5-10 секунд. Далее, я решил настроить
        next.config.js и заменить стандартный лоадер на esbuild (а если точней,
        то esbuild-loader).
      </p>
      {/* <ReactMarkdown children={'data.text'} />, */}
    </main>
  );
}

export default FullBlock;
